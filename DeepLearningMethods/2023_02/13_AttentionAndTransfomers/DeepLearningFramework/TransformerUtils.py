import torch
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
def Line2Tensor(oVocab, line):
    lLine = ['<SOS>'] + line.split() + ['<EOS>']
    return torch.tensor(oVocab(lLine))
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
class LangDataset(torch.utils.data.Dataset):
    def __init__(self, lX, lY, oVocabX, oVocabY):
        self.lX      = lX
        self.lY      = lY
        self.oVocabX = oVocabX
        self.oVocabY = oVocabY

    def __len__(self):
        return len(self.lX)

    def __getitem__(self, idx):
        sX = self.lX[idx]
        sY = self.lY[idx]

        vX = Line2Tensor(self.oVocabX, sX)
        vY = Line2Tensor(self.oVocabY, sY)

        return vX, vY
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
from torch.nn.utils.rnn import pad_sequence

class LangCollate:
    def __init__(self, padValue):
        self.padValue = padValue

    def __call__(self, lBatch):
        lX, lY = zip(*lBatch)
        mX     = pad_sequence(lX, padding_value=self.padValue, batch_first=True)
        mY     = pad_sequence(lY, padding_value=self.padValue, batch_first=True)

        return mX, mY
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#